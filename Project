import csv
import numpy as np
import random
import matplotlib.pyplot as plt

# Constants based on the provided table
TOA_RES = 500e-9  # 500 ns
AOA_RES = 1.40625  # degrees
AMP_RES = 1  # dB
FREQ_RES = 3.90625e6  # MHz
PW_RES = 500e-9  # 500 ns

# Radar parameters for the four radars
radar_parameters = {
    "radar1": {"TOA_start": 1e-6, "AOA": 45, "Amp": -20, "Freq": 9.47e9, "PW": 1100e-9, "PRI": 100e-6},
    "radar2": {"TOA_start": 11.5e-6, "AOA": 86, "Amp": -15, "Freq": 11.9e9, "PW": 750e-9, "PRI": 10e-6},
    "radar3": {"TOA_start": 1.5e-6, "AOA": 87, "Amp": -33, "Freq": 9.42e9, "PW": 3000e-9, "PRI": 130e-6},
    "radar4": {"TOA_start": 75e-3, "AOA": 50, "Amp": -30, "Freq": 9.35e9, "PW": 500e-9, "PRI": 9e-6}
}

# Function to add uncertainty to a value
def add_uncertainty(value, resolution, prob=0.2):
    if random.random() < prob:  # 20% probability to add uncertainty
        adjustment = resolution if random.random() < 0.5 else -resolution
        value += adjustment
    return value

# Function to add pulse loss
def apply_pulse_loss(pdw_list, loss_percentage):
    retained_pulses = []
    for pdw in pdw_list:
        if random.random() > loss_percentage / 100.0:
            retained_pulses.append(pdw)
    return retained_pulses

# PDW Generator function with uncertainty and pulse loss
def generate_pdw(radar_type, duration=3, pulse_loss_percentage=0, add_uncertainties=False):
    radar = radar_parameters[radar_type]
    pdw_list = []
    current_time = radar["TOA_start"]

    while current_time < duration:
        TOA = current_time
        AOA = radar["AOA"]
        Amp = radar["Amp"]
        Freq = radar["Freq"]
        PW = radar["PW"]

        if add_uncertainties:
            TOA = add_uncertainty(TOA, TOA_RES)
            AOA = add_uncertainty(AOA, AOA_RES)
            Amp = add_uncertainty(Amp, AMP_RES)
            Freq = add_uncertainty(Freq, FREQ_RES)
            PW = add_uncertainty(PW, PW_RES)

        pdw_list.append((TOA, AOA, Amp, Freq, PW))
        current_time += radar["PRI"]
    
    if pulse_loss_percentage > 0:
        pdw_list = apply_pulse_loss(pdw_list, pulse_loss_percentage)

    return pdw_list

# Function to save PDW list to a CSV file
def save_pdw_list_to_csv(pdw_list, filename):
    with open(filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['TOA', 'AOA', 'Amplitude', 'Frequency', 'Pulse Width'])
        for pdw in pdw_list:
            writer.writerow(pdw)

# Function to plot amplitude vs TOA for each radar's PDW list
def plot_amplitude_vs_toa(pdw_list, radar_name):
    toa_values = [pdw[0] for pdw in pdw_list]
    amplitude_values = [pdw[2] for pdw in pdw_list]
    
    plt.figure()
    plt.plot(toa_values, amplitude_values, marker='o', label=f"{radar_name}")
    plt.title(f"Amplitude vs TOA - {radar_name}")
    plt.xlabel("Time of Arrival (s)")
    plt.ylabel("Amplitude (dBm)")
    plt.legend()
    plt.grid(True)
    plt.show()

# Function to cluster PDWs based on AOA and Frequency
AOA_CLUSTER_SIZE = 5  # degrees
FREQ_CLUSTER_SIZE = 50e6  # MHz

def cluster_pdws(pdw_list):
    clusters = []
    for pdw in pdw_list:
        TOA, AOA, Amp, Freq, PW = pdw
        assigned_to_cluster = False

        for cluster in clusters:
            cluster_aoa, cluster_freq = cluster[0][1], cluster[0][3]
            if abs(AOA - cluster_aoa) <= AOA_CLUSTER_SIZE and abs(Freq - cluster_freq) <= FREQ_CLUSTER_SIZE:
                cluster.append(pdw)
                assigned_to_cluster = True
                break

        if not assigned_to_cluster:
            clusters.append([pdw])

    return clusters

# Function to perform ΔTOA analysis for each cluster
def delta_toa_analysis(cluster):
    toa_values = [pdw[0] for pdw in cluster]
    toa_values.sort()

    delta_toa = np.diff(toa_values)
    
    cdif_histograms = []
    for level in range(1, 5):
        cdif = np.cumsum(delta_toa[:len(delta_toa) - (level - 1)])
        cdif_histograms.append(cdif)

    return delta_toa, cdif_histograms

# Function to plot CDIF histograms for clusters
def plot_cdif_histograms(cluster, cluster_name):
    delta_toa, cdif_histograms = delta_toa_analysis(cluster)
    
    for i, cdif in enumerate(cdif_histograms):
        plt.figure()
        plt.hist(cdif, bins=20, alpha=0.7, label=f"CDIF Level {i+1}")
        plt.title(f"CDIF Histogram - {cluster_name} (Level {i+1})")
        plt.xlabel("Cumulative TOA Difference (s)")
        plt.ylabel("Frequency")
        plt.legend()
        plt.grid(True)
        plt.show()

# Function to extract sequences of PDWs based on best PRI candidates
def extract_sequences(clusters, pri_candidates, full_time_duration=3):
    sequences = []
    
    for cluster_idx, cluster in enumerate(clusters):
        sequence = []
        toa_values = [pdw[0] for pdw in cluster]
        toa_values.sort()

        best_pri = pri_candidates[cluster_idx]
        
        current_time = toa_values[0]
        while current_time < full_time_duration:
            for pdw in cluster:
                if abs(pdw[0] - current_time) < best_pri * 0.1:
                    sequence.append(pdw)
                    current_time += best_pri
                    break

        sequences.append(sequence)
    
    return sequences

# Function to save PDWs discarded during deinterleaving
def save_discarded_pdws(discarded_pdws, filename):
    save_pdw_list_to_csv(discarded_pdws, filename)

# ---- Full implementation for all tasks ----
# Step 1: Generate PDW lists for all four radars with added uncertainties and no pulse loss (Section 2.5)
pdw_radar1_with_uncertainty_no_loss = generate_pdw("radar1", pulse_loss_percentage=0, add_uncertainties=True)
pdw_radar2_with_uncertainty_no_loss = generate_pdw("radar2", pulse_loss_percentage=0, add_uncertainties=True)
pdw_radar3_with_uncertainty_no_loss = generate_pdw("radar3", pulse_loss_percentage=0, add_uncertainties=True)
pdw_radar4_with_uncertainty_no_loss = generate_pdw("radar4", pulse_loss_percentage=0, add_uncertainties=True)

# Step 2: Save PDW lists with uncertainties and no pulse loss to CSV files
#save_pdw_list_to_csv(pdw_radar1_with_uncertainty_no_loss, "radar1_with_uncertainty_no_loss.csv")
#save_pdw_list_to_csv(pdw_radar2_with_uncertainty_no_loss, "radar2_with_uncertainty_no_loss.csv")
#save_pdw_list_to_csv(pdw_radar3_with_uncertainty_no_loss, "radar3_with_uncertainty_no_loss.csv")
#save_pdw_list_to_csv(pdw_radar4_with_uncertainty_no_loss, "radar4_with_uncertainty_no_loss.csv")

# Step 3: Generate PDW lists for all four radars with added uncertainties and 10% pulse loss (Section 2.6)
pdw_radar1_with_uncertainty_10_loss = generate_pdw("radar1", pulse_loss_percentage=10, add_uncertainties=True)
pdw_radar2_with_uncertainty_10_loss = generate_pdw("radar2", pulse_loss_percentage=10, add_uncertainties=True)
pdw_radar3_with_uncertainty_10_loss = generate_pdw("radar3", pulse_loss_percentage=10, add_uncertainties=True)
pdw_radar4_with_uncertainty_10_loss = generate_pdw("radar4", pulse_loss_percentage=10, add_uncertainties=True)

# Step 4: Save PDW lists with uncertainties and 10% pulse loss to CSV files
#save_pdw_list_to_csv(pdw_radar1_with_uncertainty_10_loss, "radar1_with_uncertainty_10_loss.csv")
#save_pdw_list_to_csv(pdw_radar2_with_uncertainty_10_loss, "radar2_with_uncertainty_10_loss.csv")
#save_pdw_list_to_csv(pdw_radar3_with_uncertainty_10_loss, "radar3_with_uncertainty_10_loss.csv")
#save_pdw_list_to_csv(pdw_radar4_with_uncertainty_10_loss, "radar4_with_uncertainty_10_loss.csv")

#The radar type “Radar1” (only) in  Table2  with added uncertainties and 50% pulse loss, full 3srange
pdw_radar1_with_uncertainty_50_loss = generate_pdw("radar1", pulse_loss_percentage=50, add_uncertainties=True)
#save_pdw_list_to_csv(pdw_radar1_with_uncertainty_50_loss, "radar1_with_uncertainty_50_loss.csv")


# Step 5: Plot Amplitude vs TOA for each radar
#plot_amplitude_vs_toa(pdw_radar1_with_uncertainty_no_loss, "Radar 1 (Uncertainty, No Loss)")
#plot_amplitude_vs_toa(pdw_radar2_with_uncertainty_no_loss, "Radar 2 (Uncertainty, No Loss)")
#plot_amplitude_vs_toa(pdw_radar3_with_uncertainty_no_loss, "Radar 3 (Uncertainty, No Loss)")
#plot_amplitude_vs_toa(pdw_radar4_with_uncertainty_no_loss, "Radar 4 (Uncertainty, No Loss)")

#plot_amplitude_vs_toa(pdw_radar1_with_uncertainty_10_loss, "Radar 1 (Uncertainty, 10 loss)")
#plot_amplitude_vs_toa(pdw_radar2_with_uncertainty_10_loss, "Radar 2 (Uncertainty, 10 loss)")
#plot_amplitude_vs_toa(pdw_radar3_with_uncertainty_10_loss, "Radar 3 (Uncertainty, 10 loss)")
#plot_amplitude_vs_toa(pdw_radar4_with_uncertainty_10_loss, "Radar 4 (Uncertainty, 10 loss)")

#plot_amplitude_vs_toa(pdw_radar1_with_uncertainty_50_loss, "Radar 1 (Uncertainty, 50 loss)")




# Step 6: Perform clustering on Radar1 PDW
clusters = cluster_pdws(pdw_radar1_with_uncertainty_no_loss)
print(f"Number of clusters formed for Radar 1: {len(clusters)}")

# Step 7: Perform ΔTOA analysis and plot CDIF histograms for the first cluster
plot_cdif_histograms(clusters[0], "Cluster 1 (Radar 1)")

# Step 8: Extract sequences for the first cluster and save
pri_candidates = [100e-6]  # Example PRI candidates for Radar1
sequences = extract_sequences(clusters, pri_candidates)
save_pdw_list_to_csv(sequences[0], "radar1_cluster1_sequence.csv")
plot_amplitude_vs_toa(sequences, "sequences")


