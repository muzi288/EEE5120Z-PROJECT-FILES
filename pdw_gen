import numpy as np
import random
import csv
import matplotlib.pyplot as plt

# Constants
TOA_RES = 500e-9  #ns
AOA_RES = 1.40625  #degrees
AMP_RES = 1  #dB
FREQ_RES = 3.90625e6 #  MHz
PW_RES = 500e-9  #ns

# Radar parameters
radar_parameters = {
    "radar1": {"TOA_start": 1e-6, "AOA": 45, "Amp": -20, "Freq": 9.47e9, "PW": 1100e-9},
    "radar2": {"TOA_start": 11.5e-6, "AOA": 86, "Amp": -15, "Freq": 11.9e9, "PW": 750e-9},
    "radar3": {"TOA_start": 1.5e-6, "AOA": 87, "Amp": -33, "Freq": 9.42e9, "PW": 3000e-9},
    "radar4": {"TOA_start": 75e-3, "AOA": 50, "Amp": -30, "Freq": 9.35e9, "PW": 500e-9}
}

# PDW Generator
def generate_pdw(radar_type, duration=3, scan_pattern="circular"):
    radar = radar_parameters[radar_type]
    pdw_list = []
    current_time = radar["TOA_start"]

    while current_time < duration:
        
        TOA = current_time  # Time of arrival
        AOA = radar["AOA"]  # Angle of arrival
        Amp = radar["Amp"]  # Amplitude
        Freq = radar["Freq"]  # RF frequency
        PW = radar["PW"]  # Pulse width
        
        # Append the PDW (TOA, AOA, Amp, Freq, PW) as a tuple
        pdw_list.append((TOA, AOA, Amp, Freq, PW))
        
        # Update TOA based on radar's PRI (for example, 100 Î¼s for radar1)
        if radar_type == "radar1":
            current_time += 100e-6  # (PRI)
        elif radar_type == "radar2":
            current_time += 10e-6
        elif radar_type == "radar3":
            current_time += 130e-6
        elif radar_type == "radar4":
            current_time += 9e-6
    
    return pdw_list


# Function to save PDW list to a CSV file
def save_pdw_list_to_csv(pdw_list, filename):
    with open(filename, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['TOA', 'AOA', 'Amplitude', 'Frequency', 'Pulse Width'])
        for pdw in pdw_list:
            writer.writerow(pdw)
            

# Function to plot amplitude vs TOA for each radar's PDW list
def plot_amplitude_vs_toa(pdw_list, radar_name):
    toa_values = [pdw[0] for pdw in pdw_list]
    amplitude_values = [pdw[2] for pdw in pdw_list]
    
    plt.figure()
    plt.plot(toa_values, amplitude_values, marker='o', label=f"{radar_name}")
    plt.title(f"Amplitude vs TOA - {radar_name}")
    plt.xlabel("Time of Arrival (s)")
    plt.ylabel("Amplitude (dBm)")
    plt.legend()
    plt.grid(True)
    plt.show()


# Step 1: Generate PDW lists for all four radars with added uncertainties and no pulse loss (Section 2.5)
pdw_radar1_without_uncertainty_no_loss = generate_pdw("radar1")
pdw_radar2_without_uncertainty_no_loss = generate_pdw("radar2")
pdw_radar3_without_uncertainty_no_loss = generate_pdw("radar3")
pdw_radar4_without_uncertainty_no_loss = generate_pdw("radar4")

# Step 2: Save PDW lists with uncertainties and no pulse loss to CSV files
#save_pdw_list_to_csv(pdw_radar1_without_uncertainty_no_loss, "radar1.csv")
#save_pdw_list_to_csv(pdw_radar2_without_uncertainty_no_loss, "radar2.csv")
#save_pdw_list_to_csv(pdw_radar3_without_uncertainty_no_loss, "radar3.csv")
#save_pdw_list_to_csv(pdw_radar4_without_uncertainty_no_loss, "radar4.csv")

# Step 5: Plot Amplitude vs TOA for each radar
plot_amplitude_vs_toa(pdw_radar1_without_uncertainty_no_loss, "Radar 1")
plot_amplitude_vs_toa(pdw_radar2_without_uncertainty_no_loss, "Radar 2")
plot_amplitude_vs_toa(pdw_radar3_without_uncertainty_no_loss, "Radar 3")
plot_amplitude_vs_toa(pdw_radar4_without_uncertainty_no_loss, "Radar 4")